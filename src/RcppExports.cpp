// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// findClusters
Rcpp::List findClusters(Rcpp::IntegerVector& MASK, Rcpp::IntegerVector& INDEXP, Rcpp::IntegerVector& DIMS, Rcpp::IntegerVector& SIZE, Rcpp::IntegerVector& ROOT, int m, int conn);
RcppExport SEXP _ARIbrain_findClusters(SEXP MASKSEXP, SEXP INDEXPSEXP, SEXP DIMSSEXP, SEXP SIZESEXP, SEXP ROOTSEXP, SEXP mSEXP, SEXP connSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type MASK(MASKSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type INDEXP(INDEXPSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type DIMS(DIMSSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type SIZE(SIZESEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type ROOT(ROOTSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type conn(connSEXP);
    rcpp_result_gen = Rcpp::wrap(findClusters(MASK, INDEXP, DIMS, SIZE, ROOT, m, conn));
    return rcpp_result_gen;
END_RCPP
}
// forestTDP
Rcpp::NumericVector forestTDP(int m, int h, double alpha, double simesh, Rcpp::NumericVector& P, Rcpp::IntegerVector& SIZE, Rcpp::IntegerVector& ROOT, Rcpp::List& CHILD);
RcppExport SEXP _ARIbrain_forestTDP(SEXP mSEXP, SEXP hSEXP, SEXP alphaSEXP, SEXP simeshSEXP, SEXP PSEXP, SEXP SIZESEXP, SEXP ROOTSEXP, SEXP CHILDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type simesh(simeshSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type SIZE(SIZESEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type ROOT(ROOTSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type CHILD(CHILDSEXP);
    rcpp_result_gen = Rcpp::wrap(forestTDP(m, h, alpha, simesh, P, SIZE, ROOT, CHILD));
    return rcpp_result_gen;
END_RCPP
}
// queryPreparation
Rcpp::IntegerVector queryPreparation(int m, Rcpp::IntegerVector& ROOT, Rcpp::NumericVector& TDP, Rcpp::List& CHILD);
RcppExport SEXP _ARIbrain_queryPreparation(SEXP mSEXP, SEXP ROOTSEXP, SEXP TDPSEXP, SEXP CHILDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type ROOT(ROOTSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type TDP(TDPSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type CHILD(CHILDSEXP);
    rcpp_result_gen = Rcpp::wrap(queryPreparation(m, ROOT, TDP, CHILD));
    return rcpp_result_gen;
END_RCPP
}
// answerQuery
Rcpp::IntegerVector answerQuery(int m, double g, Rcpp::IntegerVector& L, Rcpp::IntegerVector& SIZE, Rcpp::NumericVector& TDP, Rcpp::List& CHILD);
RcppExport SEXP _ARIbrain_answerQuery(SEXP mSEXP, SEXP gSEXP, SEXP LSEXP, SEXP SIZESEXP, SEXP TDPSEXP, SEXP CHILDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type L(LSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type SIZE(SIZESEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type TDP(TDPSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type CHILD(CHILDSEXP);
    rcpp_result_gen = Rcpp::wrap(answerQuery(m, g, L, SIZE, TDP, CHILD));
    return rcpp_result_gen;
END_RCPP
}
// findalpha
Rcpp::NumericVector findalpha(Rcpp::NumericVector& p, int m, Rcpp::NumericVector& simesfactor, bool simes);
RcppExport SEXP _ARIbrain_findalpha(SEXP pSEXP, SEXP mSEXP, SEXP simesfactorSEXP, SEXP simesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type simesfactor(simesfactorSEXP);
    Rcpp::traits::input_parameter< bool >::type simes(simesSEXP);
    rcpp_result_gen = Rcpp::wrap(findalpha(p, m, simesfactor, simes));
    return rcpp_result_gen;
END_RCPP
}
// findsimesfactor
Rcpp::NumericVector findsimesfactor(bool simes, int m);
RcppExport SEXP _ARIbrain_findsimesfactor(SEXP simesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type simes(simesSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(findsimesfactor(simes, m));
    return rcpp_result_gen;
END_RCPP
}
// adjustedElementary
Rcpp::NumericVector adjustedElementary(Rcpp::NumericVector& p, Rcpp::NumericVector& alpha, int m, Rcpp::NumericVector& simesfactor);
RcppExport SEXP _ARIbrain_adjustedElementary(SEXP pSEXP, SEXP alphaSEXP, SEXP mSEXP, SEXP simesfactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type simesfactor(simesfactorSEXP);
    rcpp_result_gen = Rcpp::wrap(adjustedElementary(p, alpha, m, simesfactor));
    return rcpp_result_gen;
END_RCPP
}
// adjustedIntersection
double adjustedIntersection(double pI, Rcpp::NumericVector& alpha, int m, Rcpp::NumericVector& simesfactor);
RcppExport SEXP _ARIbrain_adjustedIntersection(SEXP pISEXP, SEXP alphaSEXP, SEXP mSEXP, SEXP simesfactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pI(pISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type simesfactor(simesfactorSEXP);
    rcpp_result_gen = Rcpp::wrap(adjustedIntersection(pI, alpha, m, simesfactor));
    return rcpp_result_gen;
END_RCPP
}
// findHalpha
int findHalpha(Rcpp::NumericVector& jumpalpha, double alpha, int m);
RcppExport SEXP _ARIbrain_findHalpha(SEXP jumpalphaSEXP, SEXP alphaSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type jumpalpha(jumpalphaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(findHalpha(jumpalpha, alpha, m));
    return rcpp_result_gen;
END_RCPP
}
// findConcentration
int findConcentration(Rcpp::NumericVector& p, double simesfactor, int h, double alpha, int m);
RcppExport SEXP _ARIbrain_findConcentration(SEXP pSEXP, SEXP simesfactorSEXP, SEXP hSEXP, SEXP alphaSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type simesfactor(simesfactorSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(findConcentration(p, simesfactor, h, alpha, m));
    return rcpp_result_gen;
END_RCPP
}
// findDiscoveries
Rcpp::IntegerVector findDiscoveries(Rcpp::IntegerVector& idx, Rcpp::NumericVector& allp, double simesfactor, int h, double alpha, int k, int m);
RcppExport SEXP _ARIbrain_findDiscoveries(SEXP idxSEXP, SEXP allpSEXP, SEXP simesfactorSEXP, SEXP hSEXP, SEXP alphaSEXP, SEXP kSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type allp(allpSEXP);
    Rcpp::traits::input_parameter< double >::type simesfactor(simesfactorSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(findDiscoveries(idx, allp, simesfactor, h, alpha, k, m));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ARIbrain_findClusters", (DL_FUNC) &_ARIbrain_findClusters, 7},
    {"_ARIbrain_forestTDP", (DL_FUNC) &_ARIbrain_forestTDP, 8},
    {"_ARIbrain_queryPreparation", (DL_FUNC) &_ARIbrain_queryPreparation, 4},
    {"_ARIbrain_answerQuery", (DL_FUNC) &_ARIbrain_answerQuery, 6},
    {"_ARIbrain_findalpha", (DL_FUNC) &_ARIbrain_findalpha, 4},
    {"_ARIbrain_findsimesfactor", (DL_FUNC) &_ARIbrain_findsimesfactor, 2},
    {"_ARIbrain_adjustedElementary", (DL_FUNC) &_ARIbrain_adjustedElementary, 4},
    {"_ARIbrain_adjustedIntersection", (DL_FUNC) &_ARIbrain_adjustedIntersection, 4},
    {"_ARIbrain_findHalpha", (DL_FUNC) &_ARIbrain_findHalpha, 3},
    {"_ARIbrain_findConcentration", (DL_FUNC) &_ARIbrain_findConcentration, 5},
    {"_ARIbrain_findDiscoveries", (DL_FUNC) &_ARIbrain_findDiscoveries, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_ARIbrain(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
